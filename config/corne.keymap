/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>

/ {
        conditional_layers {
                compatible = "zmk,conditional-layers";
                tri_layer {
                        if-layers = <1 2>;
                        then-layer = <3>;
                };
        };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// | ESC |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
// | TAB |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | CTRL|  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ENT  |
//                    | GUI | LWR | SHFT|   | SPC | RSE  | ALT |
                        bindings = <
   &kp ESC   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp BSPC
   &kp TAB   &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
   &kp LCTRL &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp RET
                  &kp LGUI &mo 1 &kp LSHFT   &kp SPACE &mo 2 &kp RALT
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp ESC   &kp N1    &kp N2    &kp N3   &kp N4    &kp N5      &kp N6    &kp N7   &kp N8    &kp N9   &kp N0   &kp BSPC
   &kp TAB   &kp EXCL  &kp AT    &kp HASH &kp DLLR  &kp PRCNT   &kp CARET &kp AMPS &kp ASTRK &kp LPAR &kp RPAR &kp GRAVE
   &kp LCTRL &kp UNDER &kp MINUS &kp PLUS &kp EQUAL &kp BSLH    &kp PIPE  &kp LBKT &kp RBKT  &kp LBRC &kp RBRC &kp RET
                                    &kp LGUI     &trans       &kp LSHFT      &kp SPACE  &trans   &kp RALT
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp ESC   &kp F1  &kp F2  &kp F3     &kp F4   &kp F5      &kp INS   &kp PG_UP    &kp UP       &kp PG_DN &kp HOME &kp BSPC
   &kp TAB   &kp F6  &kp F7  &kp F8     &kp F9   &kp F10     &kp DEL   &kp LEFT     &kp DOWN     &kp RIGHT   &kp END  &kp TILDE
   &kp LCTRL &kp F11 &kp F12 &kp C_PREV &kp C_PP &kp C_NEXT  &kp PSCRN &kp C_VOL_DN &kp C_VOL_UP &kp C_MUTE  &trans   &kp RET
                             &kp LGUI   &trans   &kp LSHFT   &kp SPACE   &trans    &kp RALT
                        >;
                };

                tri_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp ESC   &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4  &ext_power EP_TOG &trans &trans &trans &trans &kp BSPC
   &kp TAB   &bt BT_CLR   &trans       &trans       &trans       &trans        &trans &trans &trans &trans &trans &trans
   &kp LCTRL &trans       &trans       &trans       &trans       &trans        &trans &trans &trans &trans &trans &kp RET
                                    &kp LGUI     &trans       &kp LSHFT      &kp SPACE  &trans   &kp RALT  
                        >;
                };
        };
};
